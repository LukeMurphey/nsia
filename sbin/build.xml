<project default="buildall">
	<!-- <target name="compile">
    <javac srcdir="." />
  </target> -->
	<property file="sbin/default.properties"/>
	<property file="sbin/local.properties"/>
	
    <target name="jar" description="Create core NSIA JAR file">
        <jar destfile="bin/nsia.jar"
        	basedir="java-bin/" 
        	manifest="sbin/Manifest.txt"
        	excludes="*.svn"
        	includes="net/**"
        />
    </target>
	
    <target name="webarchive" description="Create the web-archive used by the NSIA web-application" >
	    <jar destfile="lib/webConsole.war"
	        basedir="src/webarchive"
	    	excludes="*.svn"
	    />
	</target>
	
    <target name="zip" description="Create the zip file used for installing NSIA">
        <zip destfile="bin/NSIA_No_Installer.zip"
            basedir="."
        	includesfile="sbin/include_list.txt"
        	whenempty="create"
        />
    </target>
	
	<target name="clean" description="Clean up archives creating by this build script" >
	    <delete>
	    	<fileset file="bin/NSIA_No_Installer.zip"/>
	    	<fileset file="bin/nsia.jar"/>
	    	<fileset file="lib/webConsole.war"/>
	    </delete>
	</target>
  
	<target name="svnbinclean" description="Clean up the .svn directories found in the java-bin directory (prevents SVN from thinking the java-bin directory should under revision control)">
		<echo level="info">Remove svn-files...</echo>
		<delete includeemptydirs="true" >
		    <fileset dir="java-bin" defaultexcludes="false" >
		        <include name="**/.svn/" />
		    </fileset>
		</delete>
	</target>
	
	<!-- java -Dij.database=jdbc:derby:var/database -jar lib/derbyrun.jar ij -->
	<target name="sqlshell" description="Starts the interactive interpreter used for administrating the Java database" >
		  <java fork="true" jar="lib/derbyrun.jar">
		  	<sysproperty key="ij.database" value="jdbc:derby:var/database" />
		  	 <arg value="ij" />    
		  </java>
	</target>
	
    <target name="downloaddefinitions" description="Download the latest definitions set and export into the NSIA directory (so it can be included in the NSIA.jar)">
    	<java classname="net.lukemurphey.nsia.support.DefinitionDownload">
    		<arg value="${value.build.licensekey}" />
    		<arg value="-f" />
    		<arg value="../src/net/lukemurphey/nsia/scan/default_definitions.xml" />
            <classpath>
              <pathelement location="lib\JSAP-2.0b.jar" />
              <pathelement location="lib\xmlrpc-2.0.jar" />
              <pathelement location="lib\commons-codec-1.3.jar" />
              <pathelement location="java-bin" />
              <!-- <pathelement path="${java.class.path}"/> -->
            </classpath>
    	</java>
    </target>
	
	<target name="dpkgclean" description="Clean the files created by the Debian package creator">
		<delete dir="${value.build.debianpackage.directory}" />
	</target>
	
	<target name="dpkg" description="Create a Debian package">
		
		<!-- 1: Create root directory -->
		<mkdir dir="${value.build.debianpackage.directory}/nsia-${value.build.version}" />
		
	    <!-- 2: Copy directory structure -->
		<copy todir="${value.build.debianpackage.directory}/nsia-${value.build.version}/DEBIAN">
			<fileset dir="src/debianpkg">
				<exclude name="**/.svn/" />
			</fileset>
		</copy>
		
		<!-- 3: Add the necessary files -->
		
		<!-- 3.1: populate the bin directory -->
        <copy todir="${value.build.debianpackage.directory}/nsia-${value.build.version}/opt/nsia/bin">
            <fileset dir="bin" defaultexcludes="true">
                <exclude name="**/.svn/" />
            	<include name="nsia.jar" />
            	<include name="run.sh" />
            </fileset>
        </copy>
		
		<!-- 3.2: populate the lib directory -->
		<copy todir="${value.build.debianpackage.directory}/nsia-${value.build.version}/opt/nsia/lib">
			  <fileset dir="lib" defaultexcludes="false">
			    <exclude name="**/.svn/" />
		      </fileset>
		</copy>
		
        <!-- 3.3: populate the etc directory -->
        <copy todir="${value.build.debianpackage.directory}/nsia-${value.build.version}/opt/nsia/etc">
              <fileset dir="etc" defaultexcludes="false">
                <exclude name="**/.svn/" />
              	<exclude name="**/init.d/" />
              </fileset>
        </copy>
		
        <!-- 3.4: populate the init.d directory -->
        <copy file="etc/init.d/ubuntu/nsia.sh" tofile="${value.build.debianpackage.directory}/nsia-${value.build.version}/etc/init.d/nsia" />

		<!-- 3.5: populate the doc directory -->
		<copy todir="${value.build.debianpackage.directory}/nsia-${value.build.version}/opt/nsia/doc">
			<fileset dir="doc" defaultexcludes="true">
		    	<include name="LICENSE" />
				<include name="README" />
				<include name="AUTHORS" />
				<include name="INSTALL" />
				<include name="NEWS" />
		    </fileset>
		</copy>
		
		<!-- 4: Set scripts to executable -->
		<chmod file="${value.build.debianpackage.directory}/nsia-${value.build.version}/etc/init.d/nsia" perm="755" />
		<chmod file="${value.build.debianpackage.directory}/nsia-${value.build.version}/opt/nsia/bin/run.sh" perm="755" />
		<chmod file="${value.build.debianpackage.directory}/nsia-${value.build.version}/DEBIAN/postinst" perm="755" />
		<chmod file="${value.build.debianpackage.directory}/nsia-${value.build.version}/DEBIAN/postrm" perm="755" />
		<chmod file="${value.build.debianpackage.directory}/nsia-${value.build.version}/DEBIAN/preinst" perm="755" />
		<chmod file="${value.build.debianpackage.directory}/nsia-${value.build.version}/DEBIAN/prerm" perm="755" />
		
		<!-- 5: Set owner to root -->
		<chown owner="root">
			<fileset dir="${value.build.debianpackage.directory}/" includes="**/*" />
		</chown>
		
		<chgrp group="root">
			<fileset dir="${value.build.debianpackage.directory}/" includes="**/*" />
		</chgrp>
		
		<!-- 6: Call dpkg -->
		<exec executable="dpkg" dir="${value.build.debianpackage.directory}" osfamily="unix">
			<arg value="-b"/>
			<arg value="nsia-${value.build.version}"/>
		</exec>

		<!-- 7: Copy the resulting file to bin -->
		<move file="${value.build.debianpackage.directory}/nsia-${value.build.version}.deb" tofile="bin/nsia-${value.build.version}.deb" />
		
	</target>
	
	<target name="buildall" depends="webarchive,jar,zip"/>
	
	<target name="debianpackage">
		
		<!-- 1: Get the DebAntTask task -->
		<taskdef name="deb" classname="org.vafer.jdeb.ant.DebAntTask" />
		
		<deb destfile="bin/nsia-${value.build.version}.deb" control="src/debianpkg" verbose="true" >
			
			<tarfileset prefix="opt/nsia/lib" dir="doc" defaultexcludes="true">
		    	<include name="LICENSE" />
				<include name="README" />
				<include name="AUTHORS" />
				<include name="INSTALL" />
				<include name="NEWS" />
		    </tarfileset>
			
			<tarfileset prefix="opt/nsia/lib" dir="lib" defaultexcludes="false">
				<exclude name="**/.svn/" />
			</tarfileset>
			
            <tarfileset prefix="opt/nsia/bin" dir="bin" defaultexcludes="true">
                <exclude name="**/.svn/" />
            	<include name="nsia.jar" />
            	<include name="run.sh" />
            </tarfileset>
			
			<tarfileset prefix="etc/init.d" dir="etc/init.d/ubuntu" defaultexcludes="true">
				<include name="nsia.sh" />
			</tarfileset>

		</deb>
		
		<!-- 
		<deb destfile="bin/nsia-${value.build.version}.deb" control="src/debianpkg">
		    <data src="${value.build.debianpackage.directory}">
		      <exclude name="**/.svn"/>
		    </data>
		</deb>
		-->
		
	</target>
</project>