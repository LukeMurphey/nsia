<project default="buildall" name="nsia">
	
	<!--
	Load the properties files, Local is loaded first since properties are immutable (cannot be changed
	by later property files) and we want the local properties to override the default properties
	-->
	<property file="dev/local.properties" />
	<property file="dev/default.properties" />
	
	<target name="jar" depends="check_default_definitions_exists,__jar" description="Create core NSIA JAR file">
	</target>
	
	<target name="__get_build_number">
        <taskdef name="svn" classname="org.tigris.subversion.svnant.SvnTask" />
		
        <svn>
		   <info target=".." />
           <wcVersion prefix="svn." path="${value.build.workingcopy.directory}" />
        </svn>
	</target>
	
	<target name="__update_build_info" depends="__get_build_number">
	
        <propertyfile file="tmp/java/net/lukemurphey/nsia/build.properties" comment="Build Information File">
                <entry key="build.number" value="${svn.revision.max}" />
                <entry key="build.date" type="date" value="now" pattern="dd.MM.yyyy HH:mm" />
        		<entry key="build.version" value="${value.build.version}" />
        </propertyfile>
	</target>
		
    <target name="__jar" depends="__update_build_info,__get_build_number">
		<!-- Create the Java archive -->
        <jar destfile="bin/nsia.jar"
        	basedir="tmp/java/" 
        	manifest="dev/Manifest.txt"
        	excludes="*.svn"
        	includes="net/**"
        />
    </target>
	
    <target name="__check_nsia_archive_exists">
        <available file="bin/nsia.jar" property="nsia_jar_present"/>
    </target>
    
    <target name="__check_default_definitions_exists">
        <available file="tmp/java/net/lukemurphey/nsia/scan/default_definitions.xml" property="default_definitions_present"/>
    </target>
    
    <target name="check_default_definitions_exists" depends="__check_default_definitions_exists" unless="default_definitions_present">
        <fail>Default definitions file does not exist</fail>
    </target>
	
    <target name="__check_web_archive_exists">
        <available file="lib/webConsole.war" property="webconsole_war_present"/>
    </target>
	
	<target name="check_nsia_archive_exists" depends="__check_nsia_archive_exists" unless="nsia_jar_present">
		<fail>NSIA Java archive does not exist</fail>
	</target>
	
    <target name="check_web_archive_exists" depends="__check_web_archive_exists" unless="webconsole_war_present">
    	<fail>Warning: Web console archive does not exist</fail>
    </target>
	
    <target name="webarchive" description="Create the web-archive used by the NSIA web-application" >
	    <jar destfile="lib/webConsole.war"
	        basedir="src/webarchive"
	    	excludes="*.svn"
	    />
	</target>
	
    <target name="zip" depends="check_web_archive_exists,check_nsia_archive_exists" description="Create the zip file used for installing NSIA">
    	<mkdir dir="tmp/packages"/>
        <zip destfile="tmp/packages/ThreatFactor NSIA(${value.build.version}).zip"
            basedir="."
        	includesfile="dev/include_list.txt"
        	whenempty="create"
        />
    </target>
	
	<target name="clean" description="Clean up archives creating by this build script" >
	    <delete>
	    	<fileset file="tmp/packages" />
	    	<fileset file="bin/nsia.jar" />
	    	<fileset file="lib/webConsole.war" />
	    </delete>
	</target>
  
	<target name="svnbinclean" description="Clean up the .svn directories found in the java-bin directory (prevents SVN from thinking the java-bin directory should under revision control)">
		<echo level="info">Remove svn-files...</echo>
		<delete includeemptydirs="true" >
		    <fileset dir="tmp/java" defaultexcludes="false" >
		        <include name="**/.svn/" />
		    </fileset>
		</delete>
	</target>
	
	<!-- java -Dij.database=jdbc:derby:var/database -jar lib/derbyrun.jar ij -->
	<target name="sqlshell" description="Starts the interactive interpreter used for administrating the Java database" >
		  <java fork="true" jar="lib/derbyrun.jar">
		  	<sysproperty key="ij.database" value="jdbc:derby:var/database" />
		  	 <arg value="ij" />    
		  </java>
	</target>
	
    <target name="downloaddefinitions" description="Download the latest definitions set and export into the NSIA directory (so it can be included in the NSIA.jar)">
    	<java classname="net.lukemurphey.nsia.support.DefinitionDownload">
    		<arg value="${value.build.licensekey}" />
    		<arg value="-f" />
    		<arg value="../tmp/java/net/lukemurphey/nsia/scan/default_definitions.xml" />
            <classpath>
              <pathelement location="lib/JSAP-2.0b.jar" />
              <pathelement location="lib/xmlrpc-2.0.jar" />
              <pathelement location="lib/commons-codec-1.3.jar" />
              <pathelement location="tmp/java" />
              <!-- <pathelement path="${java.class.path}"/> -->
            </classpath>
    	</java>
    </target>
	
	<target name="dpkgclean" description="Clean the files created by the Debian package creator">
		<delete dir="${value.build.debianpackage.directory}" />
	</target>
	
	<target name="dpkg" depends="check_web_archive_exists,check_nsia_archive_exists" description="Create a Debian package">
		<mkdir dir="tmp/packages"/>
		
		<!-- 1: Create root directory -->
		<mkdir dir="${value.build.debianpackage.directory}/nsia-${value.build.version}" />
		
	    <!-- 2: Copy directory structure -->
		<copy todir="${value.build.debianpackage.directory}/nsia-${value.build.version}/DEBIAN">
			<fileset dir="src/debianpkg">
				<exclude name="**/.svn/" />
			</fileset>
		</copy>
		
		<!-- 3: Add the necessary files -->
		
		<!-- 3.1: populate the bin directory -->
        <copy todir="${value.build.debianpackage.directory}/nsia-${value.build.version}/opt/nsia/bin">
            <fileset dir="bin" defaultexcludes="true">
                <exclude name="**/.svn/" />
            	<include name="nsia.jar" />
            	<include name="run.sh" />
            </fileset>
        </copy>
		
		<!-- 3.2: populate the lib directory -->
		<copy todir="${value.build.debianpackage.directory}/nsia-${value.build.version}/opt/nsia/lib">
			  <fileset dir="lib" defaultexcludes="false">
			    <exclude name="**/.svn/" />
		      </fileset>
		</copy>
		
        <!-- 3.3: populate the etc directory -->
        <copy todir="${value.build.debianpackage.directory}/nsia-${value.build.version}/opt/nsia/etc">
              <fileset dir="etc" defaultexcludes="false">
                <exclude name="**/.svn/" />
              	<exclude name="**/init.d/" />
              </fileset>
        </copy>
		
        <!-- 3.4: populate the init.d directory -->
        <copy file="etc/init.d/ubuntu/nsia.sh" tofile="${value.build.debianpackage.directory}/nsia-${value.build.version}/etc/init.d/nsia" />

		<!-- 3.5: populate the doc directory -->
		<copy todir="${value.build.debianpackage.directory}/nsia-${value.build.version}/opt/nsia/doc">
			<fileset dir="doc" defaultexcludes="true">
		    	<include name="LICENSE" />
				<include name="README" />
				<include name="AUTHORS" />
				<include name="INSTALL" />
				<include name="NEWS" />
		    </fileset>
		</copy>
		
		<!-- 4: Set scripts to executable -->
		<chmod file="${value.build.debianpackage.directory}/nsia-${value.build.version}/etc/init.d/nsia" perm="755" />
		<chmod file="${value.build.debianpackage.directory}/nsia-${value.build.version}/opt/nsia/bin/run.sh" perm="755" />
		<chmod file="${value.build.debianpackage.directory}/nsia-${value.build.version}/DEBIAN/postinst" perm="755" />
		<chmod file="${value.build.debianpackage.directory}/nsia-${value.build.version}/DEBIAN/postrm" perm="755" />
		<chmod file="${value.build.debianpackage.directory}/nsia-${value.build.version}/DEBIAN/preinst" perm="755" />
		<chmod file="${value.build.debianpackage.directory}/nsia-${value.build.version}/DEBIAN/prerm" perm="755" />
		
		<!-- 5: Set owner to root -->
		<chown owner="root">
			<fileset dir="${value.build.debianpackage.directory}/" includes="**/*" />
		</chown>
		
		<chgrp group="root">
			<fileset dir="${value.build.debianpackage.directory}/" includes="**/*" />
		</chgrp>
		
		<!-- 6: Call dpkg -->
		<exec executable="dpkg" dir="${value.build.debianpackage.directory}" osfamily="unix">
			<arg value="-b"/>
			<arg value="nsia-${value.build.version}"/>
		</exec>

		<!-- 7: Copy the resulting file to bin -->
		<move file="${value.build.debianpackage.directory}/nsia-${value.build.version}.deb" tofile="tmp/packages/nsia-${value.build.version}.deb" />
		
	</target>
	
	<target name="buildall" depends="webarchive,jar,zip,debianpackage,windowsinstaller"/>
	
	<target name="debianpackage" depends="check_web_archive_exists,check_nsia_archive_exists" description="Create a Debian package using jDeb (which should allow packages to built on any platform)">
		<mkdir dir="tmp/packages"/>
		
		<!-- 1: Get the DebAntTask task -->
		<taskdef name="deb" classname="org.vafer.jdeb.ant.DebAntTask" />
		
		<deb destfile="tmp/packages/nsia-${value.build.version}.deb" control="src/debianpkg" verbose="true" >
			
			<!-- 2: Add documentation -->
			<tarfileset prefix="opt/nsia/doc" dir="doc" defaultexcludes="true">
		    	<include name="LICENSE" />
				<include name="README" />
				<include name="AUTHORS" />
				<include name="INSTALL" />
				<include name="NEWS" />
		    </tarfileset>
			
			<!-- 3: Add the libraries -->
			<tarfileset prefix="opt/nsia/lib" dir="lib" defaultexcludes="false">
				<exclude name="**/.svn/" />
			</tarfileset>
			
			<!-- 4: Add the binaries -->
            <tarfileset prefix="opt/nsia/bin" dir="bin" defaultexcludes="true">
            	<include name="nsia.jar" />
            </tarfileset>
			
			<tarfileset prefix="opt/nsia/bin" dir="bin" filemode="755" defaultexcludes="true">
				<include name="run.sh" />
			</tarfileset>
			
			<!-- 5: Add the startup script -->
			<tarfileset prefix="etc/init.d" dir="etc/init.d/ubuntu" filemode="755" defaultexcludes="true">
				<include name="nsia" />
			</tarfileset>

		</deb>
		
	</target>
	
	<target name="check_nsispathdefined">
		<condition property="isnsispathdefined">
			<isset property="value.build.makensis.directory"/>
		</condition>
	</target>
	
	<target name="windowsinstaller" depends="windowsinstaller_nsispathundefined,windowsinstaller_nsispathdefined" description="Creates a Windows installer" />
	
	<target name="windowsinstaller_nsispathundefined" depends="check_nsispathdefined,check_web_archive_exists,check_nsia_archive_exists" unless="isnsispathdefined">
		<taskdef name="nsis" classname="net.sf.nsisant.Task" />
		<mkdir dir="tmp/packages"/>
        <nsis script="src/installer/ThreatFactor Install Script.nsi" verbosity="4" noconfig="yes">
            <define name="VERSION" value="${value.build.version}"/>
        </nsis>
	</target>
	
	<target name="windowsinstaller_nsispathdefined" depends="check_nsispathdefined,check_web_archive_exists,check_nsia_archive_exists" if="isnsispathdefined">
		<taskdef name="nsis" classname="net.sf.nsisant.Task" />
		<mkdir dir="tmp/packages"/>
        <nsis path="${value.build.makensis.directory}" script="src/installer/ThreatFactor Install Script.nsi" verbosity="4" noconfig="yes">
            <define name="VERSION" value="${value.build.version}"/>
        </nsis>
	</target>
</project>